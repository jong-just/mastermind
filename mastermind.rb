module Toolbox
  BOARD = ["red", "green", "blue", "yellow", "brown", "orange", "black", "white"]
  EXIT = ["quit", "exit", "x"]

  # just scrambles the board
  def scramble_board
    BOARD.shuffle
  end
end

class Player
  include Toolbox
  attr_accessor :code_guess
  @@guess_array = []

  def initialize()
  end

  def output_guess
    player_guess_to_array
  end

  def input_validation
    player_guess_to_array
    @@guess_array.each do |n|
      if BOARD.include?(n) || EXIT.include?(n)
        true
      else
        print "#{n} is not a correct input.\nPlease try again: "
        return false
      end
    end
  end

  private

  # splits the player guess string to arrays
  def player_guess_to_array
    @@guess_array = @code_guess.split(" ")
  end

end

class Jarvis < Player; end

class Mastermind
  include Toolbox
  @@player = Player.new

  # where the autogenerated code will be stored
  @@code = []

  # hint counter
  @@guesses = {
    big_correct: 0,
    small_correct: 0,
    no_correct: 0
  }
  @@end = false
  @@guess_count = 0

  def initialize(size, mode)
    @size = size
    @mode = mode
  end

  def who_guesses
    case @mode
    when "player"
      puts "Player mode selected.\nThese are the color options: #{BOARD.join(", ")}."
      player_play
    when "computer"
      print "Computer Guess mode activated. These are the color options: #{BOARD.join(", ")}.\nPlease enter your code: "
      computer_play
    else
      puts "I don't know who that is, goodbye."
    end
  end

  def player_guess
    while true do
      @@player.code_guess = gets.chomp
      if @@player.input_validation()
        return @@player.code_guess
      end
    end
  end

  # method for when the computer is playing
  def computer_play
    @@code = player_guess.split(" ")
    @computerPlayer = Jarvis.new
    until @@end do
      @@guess_count+=1
      @computerPlayer.code_guess = scramble_board.slice(0, @size)
      calculate_hint(@@code, @computerPlayer.code_guess)
      if @@code.eql?(@computerPlayer.code_guess)
        puts "Computer wins."
        @@end = true
      elsif @@guess_count == 8
        puts "Computer could not guess the code, you win."
        break
      end
      puts "Computer's guess #{@computerPlayer.code_guess.join(", ")}"
      output_hints
      guess_count_reset
    end
  end

  # method for when the player is the one making guess
  def player_play
    game_set
    until @@end do
      @@guess_count+=1
      print "Turn #{@@guess_count}: "
      player_guess
      play = @@player.output_guess
      puts "Player guess: #{play.join(", ")}" # | Computer code: #{@@code.join(", ")}"

      # win condition
      if play.eql?(@@code)
        puts "You win! The code was: #{@@code.join(", ")}."
        @@end = true
      # exit/quit condition
      elsif EXIT.include?(play[0])
        puts "Goodbye."
        break
      # didn't win, so calculating hints
      elsif play.eql?(@@code) == false
        calculate_hint(play, @@code)
        output_hints
        guess_count_reset
      end

      # lose condition
      if @@guess_count == 8
        puts "You lose! The code was: #{@@code.join(", ")}."
        @@end = true
      end
    end
  end

  # sets the game; scramble the board to set the code and cut it to size.
  def game_set
    @@code = scramble_board.slice(0, @size)
  end

  private

  # method for calculating the hints
  def calculate_hint(guess, code)
    guess.each_with_index do |x,idx|
      if code.include?(x)
        if x == code[idx]
          @@guesses[:big_correct]+=1
        else
          @@guesses[:small_correct]+=1
        end
      else
        @@guesses[:no_correct]+=1
      end
    end
  end

  # outputting the hints
  def output_hints
    puts "Big Correct: #{@@guesses[:big_correct]} | Small Correct: #{@@guesses[:small_correct]} | No Correct: #{@@guesses[:no_correct]}\n \n"
  end

  # resets the hint counter for next guess
  def guess_count_reset
    @@guesses = {
      big_correct: 0,
      small_correct: 0,
      no_correct: 0
    }
  end
end

print "Choose game mode (player, computer): "
game = Mastermind.new(4, gets.chomp)

game.who_guesses